(defvar *battle-actors*)
(defvar *battle-going*)
(defun start-battle (first-team second-team)
  (setq *battle-going* t)
  (set-battle-actors first-team second-team))
(defun set-battle-actors (first-team second-team)
  (setq *battle-actors* (cons (create-battle-team first-team)
			      (create-battle-team second-team))))
(defun create-battle-team (team)
  (map '(lambda (actor)
	 (let ((fighter (make-hash)))
	   (set-hash fighter 'actor actor)
	   (set-hash fighter 'alive t)
	   (set-hash fighter 'hp (calc-max-hp actor))
	   fighter))
       team))
(defun attack (attacker defender)
  (when (get-hash attacker 'alive) (take-damage (calc-atk-damage (get-hash attacker 'actor)) defender)))
(defun take-damage (damage defender)
  (set-hash defender 'hp
	    (- (get-hash defender 'hp) (calc-def-damage damage (get-hash defender 'actor))))
  (if (or (< (get-hash defender 'hp) 0) (= (get-hash defender 'hp) 0))
      (battle-death defender)
      nil)
  (if (battle-not-ended) *battle-actors* (battle-ended)))
(defun calc-atk-damage (actor)
  ;Вычисление значения урона актора actor через левоассоциативную свёртку (начиная с начала списка)
  (foldl '(lambda (damage modifier)
	   (funcall (cdr modifier) damage (slot actor (car modifier))))
	 0 *damage-modifiers*))
(defun calc-def-damage (in-damage actor)
  ;Вычисление значения урона актора actor через левоассоциативную свёртку (начиная с начала списка)
  (foldl '(lambda (damage modifier)
	   (funcall (cdr modifier) damage (slot actor (car modifier))))
	 in-damage *defence-modifiers*))
(defun calc-max-hp (actor)
  ;Вычисление значения урона актора actor через левоассоциативную свёртку (начиная с начала списка)
  (foldl '(lambda (damage modifier)
	   (funcall (cdr modifier) damage (slot actor (car modifier))))
	 0 *hp-modifiers*))
(defun battle-death (fighter)
  (set-hash fighter 'alive nil))
(defun battle-not-ended ()
  (if (battle-check-win) nil (not (battle-check-lose))))
(defun battle-check-win ()
  (let ((battle-is-win t) (enemy-team (cdr *battle-actors*)))
    (while (not (null enemy-team))
      (when (get-hash (car enemy-team) 'alive)
	(setq battle-is-win nil))
      (setq enemy-team (cdr enemy-team)))
    battle-is-win))
(defun battle-check-lose ()
  (let ((battle-is-lose t) (your-team (car *battle-actors*)))
    (while (not (null your-team))
      (when (get-hash (car your-team) 'alive)
	(setq battle-is-lose nil))
      (setq your-team (cdr your-team)))
    battle-is-lose))
(defun battle-ended ()
  (setq *battle-going* nil)
  (if (battle-check-win) 'win (if (battle-check-lose) 'lose 'error)))
