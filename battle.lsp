(defvar *battle-actors*)
(defun set-battle-actors (first-team second-team)
  (setq *battle-actors* (cons (create-battle-team first-team)
			      (create-battle-team second-team))))
(defun create-battle-team (team)
  (map '(lambda (actor)
	 (let ((fighter (make-hash)))
	   (set-hash fighter 'actor actor)
	   (set-hash fighter 'alive t)
	   (set-hash fighter 'hp (calc-max-hp actor))
	   fighter))
       team))
(defun attack (attacker defender)
  (take-damage (calc-atk-damage (get-hash attacker 'actor)) defender))
(defun take-damage (damage defender)
  (set-hash defender 'hp
	    (- (get-hash defender 'hp) (calc-def-damage damage (get-hash defender 'actor))))
  (if (or (< (get-hash defender 'hp) 0) (= (get-hash defender 'hp) 0))
      (progn (death defender) *battle-actors*)
      *battle-actors*))
(defun calc-atk-damage (actor)
  ;Вычисление значения урона актора actor через левоассоциативную свёртку (начиная с начала списка)
  (foldl '(lambda (damage modifier)
	   (funcall (cdr modifier) damage (slot actor (car modifier))))
	 0 *damage-modifiers*))
(defun calc-def-damage (in-damage actor)
  ;Вычисление значения урона актора actor через левоассоциативную свёртку (начиная с начала списка)
  (foldl '(lambda (damage modifier)
	   (funcall (cdr modifier) damage (slot actor (car modifier))))
	 in-damage *defence-modifiers*))
(defun calc-max-hp (actor)
  ;Вычисление значения урона актора actor через левоассоциативную свёртку (начиная с начала списка)
  (foldl '(lambda (damage modifier)
	   (funcall (cdr modifier) damage (slot actor (car modifier))))
	 0 *hp-modifiers*))
(defun death (fighter)
  (set-hash fighter 'alive nil))

